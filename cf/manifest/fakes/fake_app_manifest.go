// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/cli/cf/manifest"
	"github.com/cloudfoundry/cli/cf/models"
)

type FakeAppManifest struct {
	MemoryStub        func(string, int64)
	memoryMutex       sync.RWMutex
	memoryArgsForCall []struct {
		arg1 string
		arg2 int64
	}
	ServiceStub        func(string, string)
	serviceMutex       sync.RWMutex
	serviceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	EnvironmentVarsStub        func(string, string, string)
	environmentVarsMutex       sync.RWMutex
	environmentVarsArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	HealthCheckTimeoutStub        func(string, int)
	healthCheckTimeoutMutex       sync.RWMutex
	healthCheckTimeoutArgsForCall []struct {
		arg1 string
		arg2 int
	}
	InstancesStub        func(string, int)
	instancesMutex       sync.RWMutex
	instancesArgsForCall []struct {
		arg1 string
		arg2 int
	}
	DomainStub        func(string, string, string)
	domainMutex       sync.RWMutex
	domainArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	GetContentsStub        func() []models.Application
	getContentsMutex       sync.RWMutex
	getContentsArgsForCall []struct{}
	getContentsReturns     struct {
		result1 []models.Application
	}
	FileSavePathStub        func(string)
	fileSavePathMutex       sync.RWMutex
	fileSavePathArgsForCall []struct {
		arg1 string
	}
	GetFileSavePathStub        func() string
	getFileSavePathMutex       sync.RWMutex
	getFileSavePathArgsForCall []struct{}
	getFileSavePathReturns     struct {
		result1 string
	}
	SaveStub        func() error
	saveMutex       sync.RWMutex
	saveArgsForCall []struct{}
	saveReturns     struct {
		result1 error
	}
}

func (fake *FakeAppManifest) Memory(arg1 string, arg2 int64) {
	fake.memoryMutex.Lock()
	defer fake.memoryMutex.Unlock()
	fake.memoryArgsForCall = append(fake.memoryArgsForCall, struct {
		arg1 string
		arg2 int64
	}{arg1, arg2})
	if fake.MemoryStub != nil {
		fake.MemoryStub(arg1, arg2)
	}
}

func (fake *FakeAppManifest) MemoryCallCount() int {
	fake.memoryMutex.RLock()
	defer fake.memoryMutex.RUnlock()
	return len(fake.memoryArgsForCall)
}

func (fake *FakeAppManifest) MemoryArgsForCall(i int) (string, int64) {
	fake.memoryMutex.RLock()
	defer fake.memoryMutex.RUnlock()
	return fake.memoryArgsForCall[i].arg1, fake.memoryArgsForCall[i].arg2
}

func (fake *FakeAppManifest) Service(arg1 string, arg2 string) {
	fake.serviceMutex.Lock()
	defer fake.serviceMutex.Unlock()
	fake.serviceArgsForCall = append(fake.serviceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	if fake.ServiceStub != nil {
		fake.ServiceStub(arg1, arg2)
	}
}

func (fake *FakeAppManifest) ServiceCallCount() int {
	fake.serviceMutex.RLock()
	defer fake.serviceMutex.RUnlock()
	return len(fake.serviceArgsForCall)
}

func (fake *FakeAppManifest) ServiceArgsForCall(i int) (string, string) {
	fake.serviceMutex.RLock()
	defer fake.serviceMutex.RUnlock()
	return fake.serviceArgsForCall[i].arg1, fake.serviceArgsForCall[i].arg2
}

func (fake *FakeAppManifest) EnvironmentVars(arg1 string, arg2 string, arg3 string) {
	fake.environmentVarsMutex.Lock()
	defer fake.environmentVarsMutex.Unlock()
	fake.environmentVarsArgsForCall = append(fake.environmentVarsArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	if fake.EnvironmentVarsStub != nil {
		fake.EnvironmentVarsStub(arg1, arg2, arg3)
	}
}

func (fake *FakeAppManifest) EnvironmentVarsCallCount() int {
	fake.environmentVarsMutex.RLock()
	defer fake.environmentVarsMutex.RUnlock()
	return len(fake.environmentVarsArgsForCall)
}

func (fake *FakeAppManifest) EnvironmentVarsArgsForCall(i int) (string, string, string) {
	fake.environmentVarsMutex.RLock()
	defer fake.environmentVarsMutex.RUnlock()
	return fake.environmentVarsArgsForCall[i].arg1, fake.environmentVarsArgsForCall[i].arg2, fake.environmentVarsArgsForCall[i].arg3
}

func (fake *FakeAppManifest) HealthCheckTimeout(arg1 string, arg2 int) {
	fake.healthCheckTimeoutMutex.Lock()
	defer fake.healthCheckTimeoutMutex.Unlock()
	fake.healthCheckTimeoutArgsForCall = append(fake.healthCheckTimeoutArgsForCall, struct {
		arg1 string
		arg2 int
	}{arg1, arg2})
	if fake.HealthCheckTimeoutStub != nil {
		fake.HealthCheckTimeoutStub(arg1, arg2)
	}
}

func (fake *FakeAppManifest) HealthCheckTimeoutCallCount() int {
	fake.healthCheckTimeoutMutex.RLock()
	defer fake.healthCheckTimeoutMutex.RUnlock()
	return len(fake.healthCheckTimeoutArgsForCall)
}

func (fake *FakeAppManifest) HealthCheckTimeoutArgsForCall(i int) (string, int) {
	fake.healthCheckTimeoutMutex.RLock()
	defer fake.healthCheckTimeoutMutex.RUnlock()
	return fake.healthCheckTimeoutArgsForCall[i].arg1, fake.healthCheckTimeoutArgsForCall[i].arg2
}

func (fake *FakeAppManifest) Instances(arg1 string, arg2 int) {
	fake.instancesMutex.Lock()
	defer fake.instancesMutex.Unlock()
	fake.instancesArgsForCall = append(fake.instancesArgsForCall, struct {
		arg1 string
		arg2 int
	}{arg1, arg2})
	if fake.InstancesStub != nil {
		fake.InstancesStub(arg1, arg2)
	}
}

func (fake *FakeAppManifest) InstancesCallCount() int {
	fake.instancesMutex.RLock()
	defer fake.instancesMutex.RUnlock()
	return len(fake.instancesArgsForCall)
}

func (fake *FakeAppManifest) InstancesArgsForCall(i int) (string, int) {
	fake.instancesMutex.RLock()
	defer fake.instancesMutex.RUnlock()
	return fake.instancesArgsForCall[i].arg1, fake.instancesArgsForCall[i].arg2
}

func (fake *FakeAppManifest) Domain(arg1 string, arg2 string, arg3 string) {
	fake.domainMutex.Lock()
	defer fake.domainMutex.Unlock()
	fake.domainArgsForCall = append(fake.domainArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	if fake.DomainStub != nil {
		fake.DomainStub(arg1, arg2, arg3)
	}
}

func (fake *FakeAppManifest) DomainCallCount() int {
	fake.domainMutex.RLock()
	defer fake.domainMutex.RUnlock()
	return len(fake.domainArgsForCall)
}

func (fake *FakeAppManifest) DomainArgsForCall(i int) (string, string, string) {
	fake.domainMutex.RLock()
	defer fake.domainMutex.RUnlock()
	return fake.domainArgsForCall[i].arg1, fake.domainArgsForCall[i].arg2, fake.domainArgsForCall[i].arg3
}

func (fake *FakeAppManifest) GetContents() []models.Application {
	fake.getContentsMutex.Lock()
	defer fake.getContentsMutex.Unlock()
	fake.getContentsArgsForCall = append(fake.getContentsArgsForCall, struct{}{})
	if fake.GetContentsStub != nil {
		return fake.GetContentsStub()
	} else {
		return fake.getContentsReturns.result1
	}
}

func (fake *FakeAppManifest) GetContentsCallCount() int {
	fake.getContentsMutex.RLock()
	defer fake.getContentsMutex.RUnlock()
	return len(fake.getContentsArgsForCall)
}

func (fake *FakeAppManifest) GetContentsReturns(result1 []models.Application) {
	fake.GetContentsStub = nil
	fake.getContentsReturns = struct {
		result1 []models.Application
	}{result1}
}

func (fake *FakeAppManifest) FileSavePath(arg1 string) {
	fake.fileSavePathMutex.Lock()
	defer fake.fileSavePathMutex.Unlock()
	fake.fileSavePathArgsForCall = append(fake.fileSavePathArgsForCall, struct {
		arg1 string
	}{arg1})
	if fake.FileSavePathStub != nil {
		fake.FileSavePathStub(arg1)
	}
}

func (fake *FakeAppManifest) FileSavePathCallCount() int {
	fake.fileSavePathMutex.RLock()
	defer fake.fileSavePathMutex.RUnlock()
	return len(fake.fileSavePathArgsForCall)
}

func (fake *FakeAppManifest) FileSavePathArgsForCall(i int) string {
	fake.fileSavePathMutex.RLock()
	defer fake.fileSavePathMutex.RUnlock()
	return fake.fileSavePathArgsForCall[i].arg1
}

func (fake *FakeAppManifest) GetFileSavePath() string {
	fake.getFileSavePathMutex.Lock()
	defer fake.getFileSavePathMutex.Unlock()
	fake.getFileSavePathArgsForCall = append(fake.getFileSavePathArgsForCall, struct{}{})
	if fake.GetFileSavePathStub != nil {
		return fake.GetFileSavePathStub()
	} else {
		return fake.getFileSavePathReturns.result1
	}
}

func (fake *FakeAppManifest) GetFileSavePathCallCount() int {
	fake.getFileSavePathMutex.RLock()
	defer fake.getFileSavePathMutex.RUnlock()
	return len(fake.getFileSavePathArgsForCall)
}

func (fake *FakeAppManifest) GetFileSavePathReturns(result1 string) {
	fake.GetFileSavePathStub = nil
	fake.getFileSavePathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAppManifest) Save() error {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct{}{})
	if fake.SaveStub != nil {
		return fake.SaveStub()
	} else {
		return fake.saveReturns.result1
	}
}

func (fake *FakeAppManifest) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeAppManifest) SaveReturns(result1 error) {
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 error
	}{result1}
}

var _ manifest.AppManifest = new(FakeAppManifest)
